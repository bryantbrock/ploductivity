// Provider: PlanetSclae
//   All many-to-many relations must be explicit
//   https://www.prisma.io/docs/concepts/components/prisma-schema/relations#many-to-many-relations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  deletedAt          DateTime?
  clerkId            String     @unique
  showCompletedSteps Boolean    @default(false)
  categories         Category[]
  goals              Goal[]
}

model Goal {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  deletedAt    DateTime?
  title        String
  description  String?      @db.Text
  userId       Int
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockers     GoalToGoal[] @relation("Blockers")
  dependencies GoalToGoal[] @relation("Dependents")
  steps        Step[]

  @@index([userId])
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  steps     Step[]

  @@index([userId])
}

model GoalToGoal {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  blockerId   Int
  blocker     Goal      @relation("Blockers", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dependentId Int
  dependent   Goal      @relation("Dependents", fields: [dependentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([blockerId])
  @@index([dependentId])
}

model Step {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?
  finishedAt  DateTime?
  snoozedTill DateTime?
  title       String
  description String?    @db.Text
  position    Int?
  duration    Int?
  repeats     Int?
  completed   Int?
  goalId      Int
  goal        Goal       @relation(fields: [goalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories  Category[]

  @@index([goalId])
}
